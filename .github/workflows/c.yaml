name: C

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: 1

jobs:
  tests:
    name: Build
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            container: registry.fedoraproject.org/fedora:latest
          - os: macos-latest
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - name: Install dependencies (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        # Actually a Fedora container
        dnf install -y \
          gcc make autoconf automake libtool pkg-config \
          python3-requests python3-pyyaml \
          zlib-devel \
          libpng-devel \
          libjpeg-turbo-devel \
          libtiff-devel \
          openjpeg2-devel \
          gdk-pixbuf2-modules gdk-pixbuf2-devel \
          libxml2-devel \
          sqlite-devel \
          cairo-devel \
          glib2-devel \
          doxygen
    # Quick way to get Python 3 on macOS
    - name: Set up Python (macOS)
      uses: actions/setup-python@v2
      if: ${{ matrix.os == 'macos-latest' }}
    - name: Install dependencies (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install \
          gcc make autoconf automake libtool pkg-config \
          zlib \
          libpng \
          jpeg-turbo \
          libtiff \
          openjpeg \
          gdk-pixbuf \
          libxml2 \
          sqlite \
          cairo \
          glib
        python -m pip install --upgrade pip
        pip install requests PyYAML
    - name: Build
      run: |
        autoreconf -i
        ./configure
        make -j4 CFLAGS="-O2 -g -Werror"
    - name: Cache pristine slides
      uses: actions/cache@v2
      with:
        key: pristine
        path: test/_slidedata/pristine
    - name: Check for overlarge tests
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        # We don't want to allow arbitrarily large binary diffs into the
        # repo, where they'll live in the Git history forever.  At the time
        # of writing, our largest xdelta diff is 4881 bytes.  Arbitrarily
        # set the cutoff at 6000.
        # https://openslide.org/docs/testsuite/#tips
        THRESHOLD=6000
        large=$(find test/cases -type f -size +${THRESHOLD}c)
        if [ -n "$large" ]; then
            echo "Found test case files larger than $THRESHOLD bytes:"
            echo "$large"
            exit 1
        fi
    # Can't cache frozen tests because cache doesn't handle sparse files
    - name: Unpack tests
      run: |
        cd test
        ./driver unfreeze
        ./driver unpack nonfrozen
    - name: Test
      # Temporarily, until macOS is fixed
      continue-on-error: true
      run: cd test && ./driver run
    - name: Check exports
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: cd test && ./driver exports

  windows_setup:
    name: Set up Windows build
    runs-on: ubuntu-latest
    outputs:
      pkgver: ${{ steps.params.outputs.pkgver }}
    steps:
      - name: Calculate parameters
        id: params
        run: |
          case "${{ github.event_name }}" in
          pull_request)
              echo "::set-output name=pkgver::pr-${{ github.event.number }}.${{ github.run_number }}.${{ github.run_attempt }}-$(echo ${{ github.sha }} | cut -c-7)"
              ;;
          push)
              echo "::set-output name=pkgver::${GITHUB_REF#refs/heads/}-$(echo ${{ github.sha }} | cut -c-7)"
              ;;
          *)
              echo "Unknown event type ${{ github.event_name }}"
              exit 1
          esac

  windows_build:
    name: Windows build
    needs: windows_setup
    uses: openslide/openslide-winbuild/.github/workflows/windows.yml@main
    with:
      openslide_repo: openslide/openslide
      openslide_ref: main
      pkgver: ${{ needs.windows_setup.outputs.pkgver }}
      werror: true

  docs:
    name: Docs
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:latest
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - name: Install tools
      run: dnf install -y doxygen
    - name: Build
      run: |
        basename=openslide-docs-$GITHUB_RUN_NUMBER-$(echo $GITHUB_SHA | cut -c-10)
        mkdir artifact
        cd doc
        doxygen
        mv html ../artifact/${basename}
        echo "basename=${basename}" >> $GITHUB_ENV
    - name: Archive
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.basename }}
        path: artifact
